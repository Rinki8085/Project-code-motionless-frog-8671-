{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\OneDrive\\\\Desktop\\\\Motionless_frog\\\\motionless_frog\\\\src\\\\context\\\\AppContextProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/React.createContext();\n\nconst AppContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [isAuth, setIsAuth] = React.useState(false); // const [showForm,setShowForm] = React.useState(true);\n  // const [success, setSuccess] = React.ChildrenuseState(false);\n\n  const [token, setToken] = React.useState(\"abcdef\");\n\n  const handleLogin = username => {\n    setShow;\n    alert(\"login\");\n    setIsAuth(true);\n    setToken(Date.now() + username);\n  };\n\n  const value = {\n    isAuth,\n    token,\n    handleLogin\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AppContextProvider, \"fecdd8ASUvdArWGSb0M1/sGwjbU=\");\n\n_c = AppContextProvider;\nexport { AppContextProvider }; // 1. AppContextProvider component\n// 2. created context\n// 3. Provider, passed required value into provider\n// 4. wrapped the context provider around app.js,\n// and passed the entire app as children\n// 5. consuming the context in required componetns\n// 6. useContext( Context )\n// 7. we were able to update state on the context api, it reflected changes in all other components\n\nvar _c;\n\n$RefreshReg$(_c, \"AppContextProvider\");","map":{"version":3,"names":["React","AppContext","createContext","AppContextProvider","children","isAuth","setIsAuth","useState","token","setToken","handleLogin","username","setShow","alert","Date","now","value"],"sources":["C:/Users/hp/OneDrive/Desktop/Motionless_frog/motionless_frog/src/context/AppContextProvider.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nexport const AppContext = React.createContext();\r\n\r\nconst AppContextProvider = ({ children }) => {\r\n  const [isAuth, setIsAuth] = React.useState(false);\r\n  // const [showForm,setShowForm] = React.useState(true);\r\n  // const [success, setSuccess] = React.ChildrenuseState(false);\r\n  const [token, setToken] = React.useState(\"abcdef\");\r\n\r\n  const handleLogin = (username) => {\r\n    setShow\r\n    alert(\"login\")\r\n    setIsAuth(true);\r\n    setToken(Date.now() + username);\r\n  };\r\n\r\n  const value = { isAuth, token, handleLogin };\r\n  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\r\n};\r\n\r\nexport { AppContextProvider };\r\n\r\n// 1. AppContextProvider component\r\n// 2. created context\r\n// 3. Provider, passed required value into provider\r\n// 4. wrapped the context provider around app.js,\r\n// and passed the entire app as children\r\n// 5. consuming the context in required componetns\r\n// 6. useContext( Context )\r\n// 7. we were able to update state on the context api, it reflected changes in all other components\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,UAAU,gBAAGD,KAAK,CAACE,aAAN,EAAnB;;AAEP,MAAMC,kBAAkB,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC3C,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,KAAK,CAACO,QAAN,CAAe,KAAf,CAA5B,CAD2C,CAE3C;EACA;;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,KAAK,CAACO,QAAN,CAAe,QAAf,CAA1B;;EAEA,MAAMG,WAAW,GAAIC,QAAD,IAAc;IAChCC,OAAO;IACPC,KAAK,CAAC,OAAD,CAAL;IACAP,SAAS,CAAC,IAAD,CAAT;IACAG,QAAQ,CAACK,IAAI,CAACC,GAAL,KAAaJ,QAAd,CAAR;EACD,CALD;;EAOA,MAAMK,KAAK,GAAG;IAAEX,MAAF;IAAUG,KAAV;IAAiBE;EAAjB,CAAd;EACA,oBAAO,QAAC,UAAD,CAAY,QAAZ;IAAqB,KAAK,EAAEM,KAA5B;IAAA,UAAoCZ;EAApC;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAfD;;GAAMD,kB;;KAAAA,kB;AAiBN,SAASA,kBAAT,G,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}